/**
 * ThemeAssignments.js v1.0
 * Gestionnaire des assignments th√®mes ‚Üî contenus
 * Inspir√© de NotificationManager.js
 */

import { driveSync } from './DriveSync.js';

class ThemeAssignments {
  constructor() {
    this.assignments = {}; // { contentKey: { themes: [], assignedBy, assignedAt } }
    this.listeners = new Set();
    this.isLoaded = false;
    console.log('üè∑Ô∏è ThemeAssignments v1.0: Ready');
  }

  // ========================================
  // INIT & LOAD
  // ========================================

  async init() {
    try {
      await this.loadAssignments();
      console.log('‚úÖ ThemeAssignments initialized');
    } catch (error) {
      console.warn('‚ö†Ô∏è ThemeAssignments init failed:', error);
    }
  }

  async loadAssignments() {
    try {
      const data = await driveSync.loadFile('theme_assignments.json');
      
      if (data) {
        this.assignments = data.assignments || {};
        this.isLoaded = true;
        console.log(`üè∑Ô∏è ${Object.keys(this.assignments).length} assignments charg√©s`);
      } else {
        // Cr√©er fichier vide si inexistant
        await this.saveAssignments();
      }
      
      this.notify();
    } catch (error) {
      console.error('‚ùå Erreur chargement assignments:', error);
      this.assignments = {};
      this.isLoaded = true;
    }
  }

  async saveAssignments() {
    try {
      const data = {
        version: '1.0',
        lastModified: new Date().toISOString(),
        assignments: this.assignments
      };
      
      await driveSync.saveFile('theme_assignments.json', data);
      console.log('üíæ Assignments sauvegard√©s');
      this.notify();
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde assignments:', error);
      throw error;
    }
  }

  // ========================================
  // CRUD ASSIGNMENTS
  // ========================================

  /**
   * Assigne des th√®mes √† un contenu
   * @param {string} contentKey - Cl√© composite (ex: "post:https://...")
   * @param {Array<string>} themeIds - IDs des th√®mes
   * @param {string} userId - ID utilisateur qui fait l'action
   */
  async assignThemes(contentKey, themeIds, userId) {
    try {
      if (!contentKey || !Array.isArray(themeIds)) {
        throw new Error('Param√®tres invalides');
      }

      this.assignments[contentKey] = {
        themes: themeIds,
        assignedBy: userId,
        assignedAt: new Date().toISOString()
      };

      await this.saveAssignments();

      console.log(`üè∑Ô∏è Th√®mes assign√©s: ${contentKey} ‚Üí [${themeIds.join(', ')}]`);
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur assignation th√®mes:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Retire des th√®mes d'un contenu
   * @param {string} contentKey - Cl√© composite
   * @param {Array<string>} themeIds - IDs des th√®mes √† retirer
   */
  async removeThemes(contentKey, themeIds) {
    try {
      if (!this.assignments[contentKey]) {
        return { success: true }; // D√©j√† pas de th√®mes
      }

      const currentThemes = this.assignments[contentKey].themes;
      const newThemes = currentThemes.filter(t => !themeIds.includes(t));

      if (newThemes.length === 0) {
        // Plus aucun th√®me ‚Üí supprimer l'entr√©e
        delete this.assignments[contentKey];
      } else {
        this.assignments[contentKey].themes = newThemes;
      }

      await this.saveAssignments();

      console.log(`üè∑Ô∏è Th√®mes retir√©s: ${contentKey}`);
      
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur retrait th√®mes:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * R√©cup√®re les th√®mes d'un contenu
   * @param {string} contentKey - Cl√© composite
   * @returns {Array<string>} IDs des th√®mes
   */
  getThemesForContent(contentKey) {
    if (!contentKey) return [];
    return this.assignments[contentKey]?.themes || [];
  }

  /**
   * R√©cup√®re tous les contenus taggu√©s avec un th√®me
   * @param {string} themeId - ID du th√®me
   * @returns {Array<string>} Cl√©s composites des contenus
   */
  getAllContentsByTheme(themeId) {
    return Object.keys(this.assignments).filter(key => 
      this.assignments[key].themes.includes(themeId)
    );
  }

  /**
   * Supprime tous les assignments d'un th√®me (suppression en cascade)
   * @param {string} themeId - ID du th√®me
   */
  async deleteThemeAssignments(themeId) {
    try {
      let deletedCount = 0;

      Object.keys(this.assignments).forEach(key => {
        const themes = this.assignments[key].themes;
        const newThemes = themes.filter(t => t !== themeId);

        if (newThemes.length === 0) {
          // Plus aucun th√®me ‚Üí supprimer l'entr√©e
          delete this.assignments[key];
          deletedCount++;
        } else if (newThemes.length < themes.length) {
          // Il reste des th√®mes ‚Üí mettre √† jour
          this.assignments[key].themes = newThemes;
          deletedCount++;
        }
      });

      if (deletedCount > 0) {
        await this.saveAssignments();
        console.log(`üóëÔ∏è ${deletedCount} assignments supprim√©s pour le th√®me ${themeId}`);
      }

      return { success: true, deletedCount };
    } catch (error) {
      console.error('‚ùå Erreur suppression assignments:', error);
      return { success: false, error: error.message };
    }
  }

  // ========================================
  // STATS & DEBUG
  // ========================================

  getStats() {
    const totalAssignments = Object.keys(this.assignments).length;
    
    const byType = {
      posts: 0,
      photosMoment: 0,
      photosMastodon: 0
    };

    Object.keys(this.assignments).forEach(key => {
      if (key.startsWith('post:')) byType.posts++;
      else if (key.startsWith('photo_moment:')) byType.photosMoment++;
      else if (key.startsWith('photo_mastodon:')) byType.photosMastodon++;
    });

    return {
      totalAssignments,
      byType,
      isLoaded: this.isLoaded
    };
  }

  // ========================================
  // PUB/SUB
  // ========================================

  subscribe(callback) {
    this.listeners.add(callback);
    callback(this.getState());
    return () => this.listeners.delete(callback);
  }

  notify() {
    const state = this.getState();
    for (const listener of this.listeners) {
      listener(state);
    }
  }

  getState() {
    return {
      assignments: this.assignments,
      isLoaded: this.isLoaded
    };
  }
}

export const themeAssignments = new ThemeAssignments();

if (typeof window !== 'undefined') {
  window.themeAssignments = themeAssignments;
}