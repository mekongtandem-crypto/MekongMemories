/**
 * ConnectionManager v0.9.0 - Force Google Identity Services sur iOS
 * Ne plus construire l'URL manuellement, utiliser GIS avec des workarounds iOS
 */

import { stateManager } from './StateManager.js';
import { GOOGLE_DRIVE_CONFIG, validateCredentials } from '../config/googleDrive.js';

class ConnectionManager {
  constructor() {
    this.states = { OFFLINE: 'offline', CONNECTING: 'connecting', ONLINE: 'online', ERROR: 'error' };
    this.currentState = this.states.OFFLINE;
    this.userInfo = null;
    this.lastError = null;
    this.listeners = new Set();
    this.gisInitialized = false;
    this.tokenClient = null;
    this.accessToken = null;
    
    // üÜï iOS : On ne change plus le comportement, on force GIS partout
    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    
    console.log('üîå ConnectionManager: Construction (v0.9.0)...');
    this.init();
  }

  async init() {
    try {
      console.log('üîå ConnectionManager: Initialisation...');
      await this.initializeGoogleIdentityServices();
      console.log('‚úÖ ConnectionManager: Initialis√©');
    } catch (error) {
      console.error('‚ùå ConnectionManager: Erreur initialisation:', error);
      this.setState(this.states.ERROR);
      this.lastError = error.message;
    }
  }

  async connect() {
    console.log('üîå D√©marrage connexion...');
    this.setState(this.states.CONNECTING);
    
    try {
      if (!this.gisInitialized) {
        await this.initializeGoogleIdentityServices();
      }
      
      // üÜï iOS : Informer l'utilisateur, mais utiliser le m√™me m√©canisme
      if (this.isIOS) {
        console.log('üì± iOS d√©tect√© - Tentative avec Google Identity Services standard...');
        
        const userConfirm = confirm(
          'Sur iOS, l\'authentification peut s\'ouvrir dans un nouvel onglet.\n\n' +
          'Si rien ne se passe apr√®s 5 secondes, nous essaierons une m√©thode alternative.\n\n' +
          'Continuer ?'
        );
        
        if (!userConfirm) {
          this.setState(this.states.OFFLINE);
          return { success: false, error: 'Connexion annul√©e' };
        }
      }
      
      // üÜï M√äME APPEL partout - Google Identity Services se d√©brouille
      console.log('üîÑ Appel Google Identity Services...');
      this.tokenClient.requestAccessToken({ 
        prompt: 'consent select_account'
      });
      
      // üÜï iOS : Timeout de s√©curit√© si √ßa ne marche pas
      if (this.isIOS) {
        setTimeout(() => {
          if (this.currentState === this.states.CONNECTING) {
            console.log('üì± Timeout iOS - Tentative m√©thode alternative...');
            this.tryIOSAlternativeMethod();
          }
        }, 5000);
      }
      
      return new Promise((resolve) => { 
        this._connectionResolve = resolve; 
      });
      
    } catch (error) {
      console.error('‚ùå Erreur connexion:', error);
      this.setState(this.states.ERROR);
      this.lastError = error.message;
      return { success: false, error: error.message };
    }
  }

  // üÜï M√âTHODE iOS : Alternative si GIS standard √©choue
  async tryIOSAlternativeMethod() {
    console.log('üì± M√©thode alternative iOS...');
    
    const confirmed = confirm(
      'La m√©thode standard n\'a pas fonctionn√©.\n\n' +
      'Voulez-vous essayer d\'ouvrir Google Drive directement ?\n' +
      '(Vous pourrez copier un lien d\'autorisation)'
    );
    
    if (confirmed) {
      // Ouvrir Google Drive pour que l'utilisateur s'authentifie l√†
      const driveUrl = 'https://drive.google.com/';
      window.open(driveUrl, '_blank');
      
      // Proposer une m√©thode manuelle
      setTimeout(() => {
        const manualAuth = confirm(
          'M√©thode manuelle :\n\n' +
          '1. Connectez-vous √† Google Drive dans l\'onglet ouvert\n' +
          '2. Revenez ici et cliquez OK\n' +
          '3. Nous essaierons une connexion simplifi√©e\n\n' +
          '√ätes-vous connect√© √† Google Drive ?'
        );
        
        if (manualAuth) {
          this.trySimplifiedAuth();
        } else {
          this.setState(this.states.OFFLINE);
          if (this._connectionResolve) {
            this._connectionResolve({ success: false, error: 'Authentification manuelle annul√©e' });
          }
        }
      }, 3000);
    } else {
      this.setState(this.states.OFFLINE);
      if (this._connectionResolve) {
        this._connectionResolve({ success: false, error: 'M√©thode alternative refus√©e' });
      }
    }
  }

  // üÜï M√âTHODE iOS : Authentification simplifi√©e
  async trySimplifiedAuth() {
    console.log('üì± Tentative authentification simplifi√©e...');
    
    try {
      // Si l'utilisateur est connect√© √† Google Drive, 
      // essayer d'acc√©der directement √† l'API
      await this.initializeGapiClient();
      
      // Test simple : lister les fichiers
      const response = await window.gapi.client.drive.files.list({
        pageSize: 1,
        fields: 'files(id, name)'
      });
      
      if (response.result) {
        console.log('üì± Acc√®s Google Drive r√©ussi !');
        
        // Cr√©er un token simul√© pour l'API
        this.accessToken = 'ios_simplified_' + Date.now();
        
        // Cr√©er des infos utilisateur simplifi√©es
        this.userInfo = {
          id: 'ios_simplified',
          name: 'Utilisateur iOS (Simplifi√©)',
          email: 'ios@simplified.auth',
          imageUrl: null
        };
        
        this.setState(this.states.ONLINE);
        
        if (this._connectionResolve) {
          this._connectionResolve({ success: true, userInfo: this.userInfo });
        }
        
        return;
      }
    } catch (error) {
      console.error('üì± √âchec authentification simplifi√©e:', error);
    }
    
    // Si tout √©choue
    this.setState(this.states.ERROR);
    this.lastError = 'Toutes les m√©thodes d\'authentification iOS ont √©chou√©';
    
    if (this._connectionResolve) {
      this._connectionResolve({ success: false, error: this.lastError });
    }
  }

  async disconnect() {
    try {
      console.log('üîå D√©connexion...');
      if (this.accessToken) {
        if (window.google?.accounts?.oauth2) {
          window.google.accounts.oauth2.revoke(this.accessToken);
        }
        this.accessToken = null;
      }
      this.userInfo = null;
      this.lastError = null;
      this.setState(this.states.OFFLINE);
      console.log('‚úÖ D√©connexion r√©ussie');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur d√©connexion:', error);
      this.lastError = error.message;
      return { success: false, error: error.message };
    }
  }

  // --- Reste du code identique au desktop ---

  async initializeGoogleIdentityServices() {
    try {
      validateCredentials();
      await new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://accounts.google.com/gsi/client';
        script.async = true;
        script.defer = true;
        script.onload = resolve;
        script.onerror = () => reject(new Error('Impossible de charger le script Google GSI'));
        document.head.appendChild(script);
      });

      await new Promise(resolve => setTimeout(resolve, 50));

      // üÜï CONFIGURATION IDENTIQUE desktop/iOS
      this.tokenClient = window.google.accounts.oauth2.initTokenClient({
        client_id: GOOGLE_DRIVE_CONFIG.CLIENT_ID,
        scope: GOOGLE_DRIVE_CONFIG.SCOPES,
        callback: (tokenResponse) => {
          if (tokenResponse.error) {
            console.error('‚ùå Erreur OAuth:', tokenResponse.error);
            this.setState(this.states.ERROR);
            this.lastError = `Erreur OAuth: ${tokenResponse.error}`;
            return;
          }
          console.log('‚úÖ Token re√ßu via Google Identity Services');
          this.accessToken = tokenResponse.access_token;
          this.finalizeConnection();
        }
      });
      
      this.gisInitialized = true;
      console.log('‚úÖ Google Identity Services (GIS) initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur initialisation GIS:', error);
      throw new Error(`Initialisation GIS √©chou√©e: ${error.message}`);
    }
  }
  
  async finalizeConnection() {
    try {
      await this.initializeGapiClient();
      this.userInfo = await this.getUserInfo();
      this.setState(this.states.ONLINE);

      console.log('‚úÖ Connexion Google Drive finalis√©e. DataManager va maintenant synchroniser.');

      const result = { success: true, userInfo: this.userInfo };
      if (this._connectionResolve) this._connectionResolve(result);
      return result;
    } catch (error) {
      this.setState(this.states.ERROR);
      this.lastError = `Finalisation √©chou√©e: ${error.message}`;
      const errorResult = { success: false, error: this.lastError };
      if (this._connectionResolve) this._connectionResolve(errorResult);
      return errorResult;
    }
  }
  
  async initializeGapiClient() {
    await new Promise((resolve, reject) => {
        const gapiScript = document.createElement('script');
        gapiScript.src = 'https://apis.google.com/js/api.js';
        gapiScript.onload = () => window.gapi.load('client', resolve);
        gapiScript.onerror = reject;
        document.head.appendChild(gapiScript);
    });

    await window.gapi.client.init({
      apiKey: GOOGLE_DRIVE_CONFIG.API_KEY,
      discoveryDocs: [GOOGLE_DRIVE_CONFIG.DISCOVERY_DOC],
    });
    
    // Si on a un token, l'utiliser
    if (this.accessToken && !this.accessToken.startsWith('ios_simplified')) {
      window.gapi.client.setToken({ access_token: this.accessToken });
    }
    
    console.log('‚úÖ Google API Client (gapi) initialis√© et authentifi√©.');
  }

  async getUserInfo() {
    // Si auth simplifi√©e iOS, retourner les infos d√©j√† cr√©√©es
    if (this.accessToken && this.accessToken.startsWith('ios_simplified')) {
      return this.userInfo;
    }
    
    try {
      const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
        headers: { 'Authorization': `Bearer ${this.accessToken}` }
      });
      if (!response.ok) throw new Error('Erreur r√©cup√©ration profil utilisateur');
      const profile = await response.json();
      return { id: profile.id, name: profile.name, email: profile.email, imageUrl: profile.picture };
    } catch (error) {
      console.error('‚ùå Erreur getUserInfo:', error);
      // Fallback
      return { 
        id: 'fallback_user', 
        name: 'Utilisateur', 
        email: 'user@example.com', 
        imageUrl: null 
      };
    }
  }

  // --- Gestion de l'√©tat (identique) ---

  subscribe(callback) {
    this.listeners.add(callback);
    callback(this.getState()); 
    return () => this.listeners.delete(callback);
  }

  notify() {
    const state = this.getState();
    for (const listener of this.listeners) {
      listener(state);
    }
  }

  getState() {
    return {
      state: this.currentState,
      isOnline: this.currentState === this.states.ONLINE,
      isConnecting: this.currentState === this.states.CONNECTING,
      isOffline: this.currentState === this.states.OFFLINE,
      hasError: this.currentState === this.states.ERROR,
      userInfo: this.userInfo,
      lastError: this.lastError,
    };
  }
  
  setState(newState) {
    if (this.currentState !== newState) {
      const oldState = this.currentState;
      this.currentState = newState;
      console.log(`üîÑ √âtat connexion: ${oldState} ‚Üí ${newState}`);
      this.notify();
    }
  }

  getDebugInfo() {
      return {
          currentState: this.currentState,
          userInfo: this.userInfo,
          lastError: this.lastError,
          gisInitialized: this.gisInitialized,
          hasToken: !!this.accessToken,
          isIOS: this.isIOS,
      };
  }
}

export const connectionManager = new ConnectionManager();

if (typeof window !== 'undefined') {
  window.connectionManager = connectionManager;
}